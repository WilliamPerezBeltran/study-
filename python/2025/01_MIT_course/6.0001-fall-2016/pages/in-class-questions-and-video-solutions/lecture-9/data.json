
{
  "title":"Lecture 9",
  "content":" Getters and Setters Which of the below is a getter method for the number of wheels?\n---------------------------------- ----------- Given ------------ ---------------------------------- class Car(object): def __init__(self, w, d): self.wheels = w self.doors = d self.color = \u0026#34;\u0026#34; ---------------------------------- (A) def get_wheels(): return wheels (B) def get_wheels(): return self.wheels (C) def get_wheels(self): return wheels (D) def get_wheels(self): return self.wheels def get_wheels():\rreturn wheels\rclose def get_wheels():\rreturn self.wheels\rclose def get_wheels(self):\rreturn wheels close def get_wheels(self):\rreturn self.wheels\rcheck Check \u0026emsp; Show Solution Viewing videos requires an internet connection View video page Download video Download transcript Subclass What line could replace ____blank____ to create a class that inherits from Animal in the code below?\n____blank____ def speak(self): print(\u0026#34;ruff ruff\u0026#34;) (line1) d = Dog(7) (line2) d.set_name(\u0026#34;Ruffles\u0026#34;) (line3) d.speak() class Dog(Animal): check class Animal(Dog): close class Dog(object) close Check With this definition of Dog, you run a program with line1, line2, and line3 above. What happens? Refer to the lecture slides for the code making up the \u0026ldquo;Animal\u0026rdquo; class.\nError on (line1) because Dog does not have an __init__ close Uses the __init__ from Animal, but then an error (line2) because Dog does not have a set_name method. close Uses the __init__ and set_name from Animal, but then an error (line3) because all methods must return something. close Runs, creates a Dog object with age=7 and name=\u0026ldquo;Ruffles\u0026rdquo;, and prints \u0026ldquo;ruff ruff\u0026rdquo; check Check \u0026emsp; Show Solution Viewing videos requires an internet connection View video page Download video Download transcript "}


